version: '3.3'
networks:
  web:
    external: true
  back-tier: null
services:
  besu:
    networks:
      - back-tier
    ports:
#      - '8545:8545'
      - '30303:30303'
      - '9545:9545'
    image: 'hyperledger/besu:22.7.3'
    volumes:
      - '/mnt/tank/besu/classic/:/var/lib/besu/'
    environment:
      - BESU_NETWORK=classic
      - BESU_DATA_PATH=/var/lib/besu/
      - BESU_MAX_PEERS=1000
      - BESU_METRICS_ENABLED=true
      - BESU_METRICS_HOST=0.0.0.0
      - BESU_METRICS_PORT=9545
      - BESU_RPC_HTTP_ENABLED=true
      - BESU_HOST_ALLOWLIST=*
#      - BESU_HOST_WHITELIST=167.86.100.59,127.0.0.1,192.168.96.3,62.178.62.163,172.23.0.5
#      - BESU_RPC_HTTP_TLS_ENABLED=true
#      - BESU_HOST_WHITELIST="*"
#      - BESU_LOGGING=DEBUG
      - BESU_RPC_HTTP_HOST=0.0.0.0
      - BESU_RPC_HTTP_PORT=8545
      - BESU_RPC_HTTP_CORS_ORIGINS=*
      - BESU_RPC_HTTP_API=ETH,NET,WEB3,ADMIN
      - BESU_RPC_HTTP_AUTHENTICATION_ENABLED=false
#      - BESU_RPC_WS_ENABLED=true
#      - BESU_RPC_WS_HOST=0.0.0.0
#      - BESU_RPC_WS_API=ETH,NET,WEB3
#      - BESU_GRAPHQL_HTTP_ENABLED=true
#      - BESU_GRAPHQL_HTTP_HOST=0.0.0.0
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 2000k
        max-file: '10'
    networks:
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.besu.entrypoints=websecure"
      - "traefik.http.routers.besu.rule=Host(`besu.etc-network.info`)"
      - "traefik.http.routers.besu.tls=true"
      - "traefik.http.services.besu.loadbalancer.server.port=8545"

  geth:
    image: etclabscore/core-geth:latest
    command: --classic --gcmode "archive"  --http --http.port 8454 --http.addr 0.0.0.0 --http.api personal,eth,net,web3,txpool,debug  --http.corsdomain "*" --http.vhosts "*"
    volumes:
      - '/mnt/tank/geth/classic:/root/.ethereum'
    networks:
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.geth.entrypoints=websecure"
      - "traefik.http.routers.geth.rule=Host(`geth.etc-network.info`)"
      - "traefik.http.routers.geth.tls=true"
      - "traefik.http.services.geth.loadbalancer.server.port=8454"

  geth-kotti:
    image: etclabscore/core-geth:latest
    command: --kotti --gcmode "archive" --http --http.port 8454 --http.addr 0.0.0.0 --http.api personal,eth,net,web3,txpool,debug  --http.corsdomain "*" --http.vhosts "*"
    volumes:
      - '/mnt/tank/geth-kotti/classic:/root/.ethereum'
    networks:
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.gethkotti.entrypoints=websecure"
      - "traefik.http.routers.gethkotti.rule=Host(`geth-kotti.etc-network.info`)"
      - "traefik.http.routers.gethkotti.tls=true"
      - "traefik.http.services.gethkotti.loadbalancer.server.port=8454"

  geth-goerli:
    image: etclabscore/core-geth:latest
    command: --goerli --gcmode "archive" --http --http.port 8454 --http.addr 0.0.0.0 --http.api personal,eth,net,web3,txpool,debug  --http.corsdomain "*" --http.vhosts "*"
    volumes:
      - '/mnt/tank/geth-goerli/classic:/root/.ethereum'
    networks:
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.gethgoerli.entrypoints=websecure"
      - "traefik.http.routers.gethgoerli.rule=Host(`geth-goerli.etc-network.info`)"
      - "traefik.http.routers.gethgoerli.tls=true"
      - "traefik.http.services.gethgoerli.loadbalancer.server.port=8454"

  geth-mordor:
    image: etclabscore/core-geth:latest
    command: --mordor --gcmode "archive" --http --http.port 8454 --http.addr 0.0.0.0 --http.api personal,eth,net,web3,txpool,debug  --http.corsdomain "*" --http.vhosts "*"
    volumes:
      - '/mnt/tank/geth-mordor/classic:/root/.ethereum'
    networks:
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.gethmordor.entrypoints=websecure"
      - "traefik.http.routers.gethmordor.rule=Host(`geth-mordor.etc-network.info`)"
      - "traefik.http.routers.gethmordor.tls=true"
      - "traefik.http.services.gethmordor.loadbalancer.server.port=8454"

  prometheus:
    image: 'prom/prometheus:v2.38.0'
    volumes:
      - './prometheus/:/etc/prometheus/'
      - 'prometheus_data:/prometheus'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200d'
    ports:
      - '9090:9090'
    networks:
      - back-tier
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.mariomichel.com`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.middlewares=traefik-auth@docker"
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 2000k
        max-file: '10'

  node-exporter:
    image: prom/node-exporter
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - >-
        ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - '9100:9100'
    networks:
      - back-tier
    restart: unless-stopped
    deploy:
      mode: global
    logging:
      driver: json-file
      options:
        max-size: 2000k
        max-file: '10'

  grafana:
    image: grafana/grafana:9.1.6
    user: '472'
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=<PASSWD STRIPED>
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - './grafana.ini:/etc/grafana/grafana.ini'
      - 'grafana_data:/var/lib/grafana'
    networks:
      - back-tier
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.rule=Host(`grafana.mariomichel.com`, `dashboard.etc-network.info`)"
      - "traefik.http.routers.grafana.tls=true"
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 2000k
        max-file: '10'

  expedition:
#    ports:
#      - '8999:80'
    image: 'expedition:latest'
    networks:
      - back-tier
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.explorerexpedition.entrypoints=websecure"
      - "traefik.http.routers.explorerexpedition.rule=Host(`explorer-expedition.etc-network.info`)"
      - "traefik.http.routers.explorerexpedition.tls=true"
    logging:
      driver: json-file
      options:
        max-size: 2000k
        max-file: '10'
    restart: unless-stopped

  ethereum-lite-explorer:
    networks:
      - web
#    ports:
#      - '8123:80'
    environment:
      - 'APP_NODE_URL=https://besu.etc-network.info'
    image: alethio/ethereum-lite-explorer
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.exploreralethio.entrypoints=websecure"
      - "traefik.http.routers.exploreralethio.rule=Host(`explorer-alethio.etc-network.info`)"
      - "traefik.http.routers.exploreralethio.tls=true"
    logging:
      driver: json-file
      options:
        max-size: 2000k
        max-file: '10'
    restart: unless-stopped

  redis_db:
    image: 'redis:alpine'
    command: redis-server
  db:
    image: postgres:14
    restart: always
#    volumes:
#      - '/mnt/tank/blockscout/db-index:/var/lib/postgresql/data'
    environment:
        POSTGRES_PASSWORD: '<PASSWD STRIPED>'
        POSTGRES_USER: '<USER STRIPED>'
        POSTGRES_HOST_AUTH_METHOD: 'trust'
    ports:
      - 7432:5432
    logging:
      driver: json-file
      options:
        max-size: 2000k

        max-file: '10'
    restart: unless-stopped
  blockscout:
    depends_on:
      - db
      - smart-contract-verifier
      - redis_db
    image: blockscout/blockscout:latest
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        COIN: "Ethereum Classic"
        CACHE_EXCHANGE_RATES_PERIOD: ""
        DISABLE_READ_API: "false"
        API_PATH: "/"
        NETWORK_PATH: "/"
        DISABLE_WEBAPP: "false"
        DISABLE_WRITE_API: "false"
        CACHE_ENABLE_TOTAL_GAS_USAGE_COUNTER: ""
        CACHE_ADDRESS_WITH_BALANCES_UPDATE_INTERVAL: ""
        SOCKET_ROOT: "/"
        WOBSERVER_ENABLED: "false"
        ADMIN_PANEL_ENABLED: ""
    logging:
      driver: json-file
      options:
        max-size: 2000k
        max-file: '10'
    restart: unless-stopped
    links:
      - db:database
    command: bash -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      -  ./envs/common-blockscout.env
    ports:
      - 4000:4000
    networks:
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.explorerblockscout.entrypoints=websecure"
      - "traefik.http.routers.explorerblockscout.rule=Host(`explorer-blockscout.etc-network.info`)"
      - "traefik.http.routers.explorerblockscout.tls=true"
      - "traefik.http.services.explorerblockscout.loadbalancer.server.port=4000"
  smart-contract-verifier:
    image: ghcr.io/blockscout/smart-contract-verifier:${SMART_CONTRACT_VERIFIER_DOCKER_TAG:-latest}
    restart: always
    env_file:
      -  ./envs/common-smart-contract-verifier.env
    ports:
      - 8043:8043
    logging:
      driver: json-file
      options:
        max-size: 2000k
        max-file: '10'
    restart: unless-stopped

  nodes-interface:
     image: nodes-interface:latest
     networks:
        - web
     labels:
       - traefik.docker.network=web
       - traefik.enable=true
       - traefik.http.routers.nodes.entrypoints=websecure
       - traefik.http.routers.nodes.rule=Host(`nodes.etc-network.info`)
       - traefik.http.routers.nodes.tls=true
     restart: unless-stopped

volumes:
  prometheus_data: {}
  grafana_data: {}
  pgdata: {}
  walletstore: {}
